@implements IAsyncDisposable
@inject IJSRuntime JsRuntime


<video id="@videoElementId" @attributes="InputAttributes" muted></video>

@code {
    private string videoElementId = $"barcode-reader-{Guid.NewGuid()}";
    private DotNetObjectReference<BarcodeReader>? thisReference;
    private IJSObjectReference? jsReference;

    private bool hasRendered;
    private bool shouldStart;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? InputAttributes { get; set; }

    [Parameter]
    public bool StopOnFirstScan { get; set; }

    [Parameter]
    public EventCallback<Exception> OnError { get; set; }

    [Parameter]
    public EventCallback<string> OnScanned { get; set; }

    [Parameter]
    public bool HasBarcodeSupport { get; set; }

    [Parameter]
    public EventCallback<bool> HasBarcodeSupportChanged { get; set; }

    [Parameter]
    public bool IsScanning { get; set; }

    [Parameter]
    public EventCallback<bool> IsScanningChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        try
        {
            thisReference = DotNetObjectReference.Create(this);
            await using var module = await JsRuntime.InvokeAsync<IJSObjectReference>(
                "import",
                $"./Components/BarcodeReader.razor.js");

            jsReference = await module.InvokeAsync<IJSObjectReference>(
                "GetInstace",
                thisReference,
                videoElementId,
                StopOnFirstScan);

            HasBarcodeSupport = await (jsReference?.InvokeAsync<bool>("hasBarcodeSupport")
                ?? ValueTask.FromResult(false));
            await HasBarcodeSupportChanged.InvokeAsync(HasBarcodeSupport);


            hasRendered = true;

            if (shouldStart)
                await Start();
        }
        catch (Exception e)
        {
            await OnError.InvokeAsync(e);
        }
    }

    public async ValueTask Start()
    {
        if (hasRendered)
            await (jsReference?.InvokeVoidAsync("start") ?? ValueTask.CompletedTask);
        else
            shouldStart = true;
    }


    [JSInvokable]
    public async ValueTask SetError(string error)
        => await OnError.InvokeAsync(new Exception(error));

    [JSInvokable]
    public async ValueTask SetResult(string result)
        => await OnScanned.InvokeAsync(result);

    [JSInvokable]
    public async ValueTask SetScanning(bool isScanning)
    {
        IsScanning = isScanning;
        await IsScanningChanged.InvokeAsync(IsScanning);
    }

    public async ValueTask DisposeAsync()
    {
        if (jsReference is not null)
        {
            await jsReference.InvokeVoidAsync("dispose");
            await jsReference.DisposeAsync();
        }
        thisReference?.Dispose();
    }
}
