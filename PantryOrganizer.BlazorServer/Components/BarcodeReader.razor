@using System.Text.Json.Serialization;
@implements IAsyncDisposable
@inject IJSRuntime JsRuntime


<video @ref="videoElement" @attributes="InputAttributes" muted></video>

@code {
    private ElementReference videoElement;
    private DotNetObjectReference<BarcodeReader>? thisReference;
    private IJSObjectReference? jsReference;

    private bool hasRendered;
    private bool shouldStart;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? InputAttributes { get; set; }

    [Parameter]
    public bool StopOnFirstScan { get; set; }

    [Parameter]
    public EventCallback<Exception> OnError { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<BarcodeResult>> OnScanned { get; set; }

    [Parameter]
    public bool HasBarcodeSupport { get; set; }

    [Parameter]
    public EventCallback<bool> HasBarcodeSupportChanged { get; set; }

    [Parameter]
    public bool IsScanning { get; set; }

    [Parameter]
    public EventCallback<bool> IsScanningChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        try
        {
            thisReference = DotNetObjectReference.Create(this);
            await using var module = await JsRuntime.InvokeAsync<IJSObjectReference>(
                "import",
                $"./Components/BarcodeReader.razor.js");

            jsReference = await module.InvokeAsync<IJSObjectReference>(
                "GetInstace",
                thisReference,
                videoElement,
                StopOnFirstScan);

            HasBarcodeSupport = await (jsReference?.InvokeAsync<bool>("hasBarcodeSupport")
                ?? ValueTask.FromResult(false));
            await HasBarcodeSupportChanged.InvokeAsync(HasBarcodeSupport);


            hasRendered = true;

            if (shouldStart)
                await Start();
        }
        catch (Exception e)
        {
            await OnError.InvokeAsync(e);
        }
    }

    public async ValueTask Start()
    {
        if (hasRendered && HasBarcodeSupport)
            await (jsReference?.InvokeVoidAsync("start") ?? ValueTask.CompletedTask);
        else
            shouldStart = true;
    }

    public async ValueTask Stop()
        => await (jsReference?.InvokeVoidAsync("stop") ?? ValueTask.CompletedTask);


    [JSInvokable]
    public async ValueTask SetError(string error)
        => await OnError.InvokeAsync(new Exception(error));

    [JSInvokable]
    public async ValueTask SetResult(IEnumerable<BarcodeResult> result)
        => await OnScanned.InvokeAsync(result);

    [JSInvokable]
    public async ValueTask SetScanning(bool isScanning)
    {
        IsScanning = isScanning;
        await IsScanningChanged.InvokeAsync(IsScanning);
    }

    public async ValueTask DisposeAsync()
    {
        if (jsReference is not null)
        {
            await jsReference.InvokeVoidAsync("stop");
            await jsReference.DisposeAsync();
        }
        thisReference?.Dispose();
    }

    public struct BarcodeResult
    {
        [JsonPropertyName("rawValue")]
        public string Value { get; set; }


        [JsonPropertyName("format")]
        public string Format { get; set; }


        [JsonPropertyName("boundingBox")]
        public BoundingBox BoundingBox { get; set; }


        [JsonPropertyName("cornerPoints")]
        public CornerPoint[] CornerPoints { get; set; }
    }

    public struct BoundingBox
    {
        [JsonPropertyName("x")]
        public double XCoordinate { get; set; }

        [JsonPropertyName("y")]
        public double YCoordinate { get; set; }

        [JsonPropertyName("width")]
        public double Width { get; set; }

        [JsonPropertyName("height")]
        public double Height { get; set; }

        [JsonPropertyName("top")]
        public double Top { get; set; }

        [JsonPropertyName("bottom")]
        public double Bottom { get; set; }

        [JsonPropertyName("left")]
        public double Left { get; set; }

        [JsonPropertyName("right")]
        public double Right { get; set; }
    }

    public struct CornerPoint
    {
        [JsonPropertyName("x")]
        public double XCoordinate { get; set; }

        [JsonPropertyName("y")]
        public double YCoordinate { get; set; }
    }
}