@page "/storageitems"
@inject IStorageItemService StorageItemService
@inject IPantryService PantryService

<PageTitle>Storage items</PageTitle>

<div class="row gy-2 gy-md-4">
    <h1>Storage items</h1>

    <div class="table-responsive">
        <table class="table table-striped">
            <colgroup>
                <col style="width: 32px" />
                <col class="col-8" />
                <col class="col-4" />
            </colgroup>
            <SortingTableHead Sorting="Sorting">
                <tr>
                    <SortingTableHeader class="align-top" colspan="2" @bind-SortingParameter="Sorting.Name" @bind-SortingParameter:after="UpdateList">
                        <InputText class="form-control" @bind-Value="Filter.Name" @bind-Value:after="UpdateList" />
                    </SortingTableHeader>
                    <th class="align-top">
                        Quantity
                    </th>
                </tr>
            </SortingTableHead>
            @foreach (var pantry in Pantries)
            {
                <tbody>
                    <tr>
                        <td colspan="3">
                            <span>@pantry.Name</span>
                            <a class="btn btn-sm btn-primary float-end" href="@($"storageitem?PantryId={pantry.Id}")">
                                <span class="oi oi-plus"></span>
                            </a>
                        </td>
                    </tr>
                    @foreach (var storageItemGroup in StorageItemGroups.Where(item => item.PantryId == pantry.Id))
                    {
                        <tr @onclick="() => storageItemGroup.IsExpanded = !storageItemGroup.IsExpanded">
                            <td>
                                @if (storageItemGroup.IsExpanded)
                                {
                                    <span class="oi oi-caret-bottom"></span>
                                }
                                else
                                {
                                    <span class="oi oi-caret-right"></span>
                                }
                            </td>
                            <td>
                                <a href="@($"storageitem/{GetOrInitItems(storageItemGroup).First().Id}")">
                                    <span>
                                        @storageItemGroup.Name
                                    </span>
                                </a>
                            </td>
                            <td>
                                <a href="@($"storageitem/{GetOrInitItems(storageItemGroup).First().Id}")">
                                    <span>
                                        @($"{storageItemGroup.Quantity:G0} {(storageItemGroup.Quantity == 1 ? storageItemGroup.Unit?.Abbreviation : storageItemGroup.Unit?.AbbreviationPlural)}")
                                    </span>
                                </a>
                            </td>
                        </tr>
                        @if (storageItemGroup.IsExpanded && storageItemGroup.ItemCount > 1)
                        {
                            @foreach (var storageItem in GetOrInitItems(storageItemGroup))
                            {
                                <tr>
                                    <td></td>
                                    <td><a href="@($"storageitem/{storageItem.Id}")"></a></td>
                                    <td>
                                        <a href="@($"storageitem/{storageItem.Id}")">
                                            <span>
                                                @($"{storageItem.Quantity:G0} {(storageItem.Quantity == 1 ? storageItem.Unit?.Abbreviation : storageItem.Unit?.AbbreviationPlural)}")
                                            </span>
                                        </a>
                                    </td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            }
        </table>
    </div>
    <div class="col-md-4 col-xxl-3">
    </div>
</div>

@code {
    public IEnumerable<StorageItemGroupDto> StorageItemGroups { get; set; }
        = new List<StorageItemGroupDto>();

    public IEnumerable<PantryDto> Pantries { get; set; } = new List<PantryDto>();

    public StorageItemGroupFilterDto Filter { get; set; } = new StorageItemGroupFilterDto();

    public StorageItemGroupSortingDto Sorting { get; set; } = new StorageItemGroupSortingDto();

    protected override void OnParametersSet()
    {
        UpdateList();
    }

    private void UpdateList()
    {
        StorageItemGroups = StorageItemService.GetListGrouped(
           filter: Filter,
           sorting: Sorting);

        UpdatePantries();
    }

    private void UpdatePantries()
    {
        var pantries = PantryService.GetList();

        var requiredIds = StorageItemGroups.Select(item => item.PantryId)
            .Distinct()
            .ToList();

        if (!string.IsNullOrEmpty(Filter.Name))
            pantries = pantries.Where(item => requiredIds.Contains(item.Id));

        if (Sorting.Name.IsEnabled)
            pantries = pantries.OrderBy(item =>
            {
                var index = requiredIds.IndexOf(item.Id);
                return index >= 0 ? index : int.MaxValue;
            });
        else
            pantries = pantries.OrderBy(item => item.Name);

        Pantries = pantries;
    }

    private IEnumerable<StorageItemDto> GetOrInitItems(StorageItemGroupDto storageItemGroup)
    {
        if (storageItemGroup.Items == default)
            storageItemGroup.Items = StorageItemService.GetItemsOfGroup(
                storageItemGroup.Name,
                storageItemGroup.UnitDimensionId,
                storageItemGroup.PantryId);

        return storageItemGroup.Items;
    }
}
