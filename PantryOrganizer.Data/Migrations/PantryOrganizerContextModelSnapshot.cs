// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PantryOrganizer.Data;

#nullable disable

namespace PantryOrganizer.Data.Migrations
{
    [DbContext(typeof(PantryOrganizerContext))]
    partial class PantryOrganizerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PantryOrganizer.Data.Models.Pantry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("Pantry", (string)null);
                });

            modelBuilder.Entity("PantryOrganizer.Data.Models.StorageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Ean")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Note")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("PantryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(12, 4)
                        .HasColumnType("decimal(12,4)");

                    b.Property<double?>("RemainingPercentage")
                        .HasPrecision(5, 4)
                        .HasColumnType("float(5)");

                    b.Property<DateTimeOffset>("StoredDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PantryId");

                    b.HasIndex("UnitId");

                    b.ToTable("StorageItem", (string)null);
                });

            modelBuilder.Entity("PantryOrganizer.Data.Models.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbbreviationPlural")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("BaseConversionFactor")
                        .HasColumnType("float");

                    b.Property<int?>("DimensionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBase")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecipeUnit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStorageUnit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("NamePlural")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DimensionId")
                        .IsUnique()
                        .HasFilter("[IsBase] = 1");

                    b.ToTable("Unit", (string)null);
                });

            modelBuilder.Entity("PantryOrganizer.Data.Models.UnitDimension", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("UnitDimension", (string)null);
                });

            modelBuilder.Entity("PantryOrganizer.Data.Models.StorageItem", b =>
                {
                    b.HasOne("PantryOrganizer.Data.Models.Pantry", "Pantry")
                        .WithMany("Items")
                        .HasForeignKey("PantryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PantryOrganizer.Data.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pantry");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("PantryOrganizer.Data.Models.Unit", b =>
                {
                    b.HasOne("PantryOrganizer.Data.Models.UnitDimension", "Dimension")
                        .WithMany("Units")
                        .HasForeignKey("DimensionId");

                    b.Navigation("Dimension");
                });

            modelBuilder.Entity("PantryOrganizer.Data.Models.Pantry", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("PantryOrganizer.Data.Models.UnitDimension", b =>
                {
                    b.Navigation("Units");
                });
#pragma warning restore 612, 618
        }
    }
}
